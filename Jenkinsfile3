pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = '51.44.223.62:8081'
        KUBE_NAMESPACE = 'fullstackapp'
        REPO_URL = "git@github.com:basmaoueslati/FULLSTACK.git"
        BRANCH_NAME = "main"
    }

    options {
        skipStagesAfterUnstable()
    }

    stages {
        stage('Clean Jenkins Workspace') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        stageResults['Clean Jenkins Workspace'] = 'SUCCESS'
                        echo 'Removing old backend/frontend artifacts'
                        sh 'rm -rf backend_app/target frontend/dist || true'
                    }
                    if (!stageResults.containsKey('Clean Jenkins Workspace')) {
                        stageResults['Clean Jenkins Workspace'] = 'FAILURE'
                    }
                }
            }
        }

        stage('Setting version & push changes') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        stageResults['Setting version & push changes'] = 'SUCCESS'
                        dir('backend_app') {
                            CURRENT_VERSION = sh(
                                script: 'mvn help:evaluate -Dexpression=revision -q -DforceStdout',
                                returnStdout: true
                            ).trim()

                            def parts = CURRENT_VERSION.split('\\.')
                            def newPatch = (parts[2] as Integer) + 1
                            NEXT_VERSION = "${parts[0]}.${parts[1]}.${newPatch}"
                            echo "Updating version: ${CURRENT_VERSION} â†’ ${NEXT_VERSION}"

                            sh "mvn versions:set-property -Dproperty=revision -DnewVersion=${NEXT_VERSION}"
                            sh "mvn versions:commit"

                            sh '''
                                git config --local user.email "basma.oueslati@gmail.com"
                                git config --local user.name "Jenkins"
                                git add pom.xml
                                git commit -m "Bump version to ${NEXT_VERSION}" || true
                            '''

                            sshagent(['github-ssh-key']) {
                                sh '''
                                    git remote set-url origin git@github.com:basmaoueslati/FULLSTACK.git
                                    git pull origin ${BRANCH_NAME} || true
                                    git push origin HEAD:${BRANCH_NAME}
                                '''
                            }
                        }
                    }
                    if (!stageResults.containsKey('Setting version & push changes')) {
                        stageResults['Setting version & push changes'] = 'FAILURE'
                    }
                }
            }
        }

        stage('Build & test') {
            parallel {
                stage('Build & Test Frontend') {
                    steps {
                        script {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                stageResults['Build & Test Frontend'] = 'SUCCESS'
                                dir('frontend') {
                                    sh 'npm ci'
                                    sh 'npm run build'
                                    sh 'xvfb-run npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox'
                                }
                            }
                            if (!stageResults.containsKey('Build & Test Frontend')) {
                                stageResults['Build & Test Frontend'] = 'FAILURE'
                            }
                        }
                    }
                }

                stage('Build & Test Backend') {
                    environment {
                        SPRING_PROFILES_ACTIVE = 'test-no-db'
                    }
                    steps {
                        script {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                stageResults['Build & Test Backend'] = 'SUCCESS'
                                dir('backend_app') {
                                    sh 'mvn clean package -DskipTests=true'
                                    sh 'mvn test'
                                }
                            }
                            if (!stageResults.containsKey('Build & Test Backend')) {
                                stageResults['Build & Test Backend'] = 'FAILURE'
                            }
                        }
                    }
                }
            }
        }

        stage('Quality Gates') {
            parallel {
                stage('SonarQube Backend') {
                    steps {
                        script {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                stageResults['SonarQube Backend'] = 'SUCCESS'
                                dir('backend_app') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh '''
                                            mvn clean verify sonar:sonar \
                                              -Dsonar.projectKey=backend
                                        '''
                                    }
                                    timeout(time: 15, unit: 'MINUTES') {
                                        waitForQualityGate abortPipeline: true
                                    }
                                }
                            }
                            if (!stageResults.containsKey('SonarQube Backend')) {
                                stageResults['SonarQube Backend'] = 'FAILURE'
                            }
                        }
                    }
                }

                stage('SonarQube Frontend') {
                    steps {
                        script {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                stageResults['SonarQube Frontend'] = 'SUCCESS'
                                dir('frontend') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh '''
                                            sonar-scanner \
                                              -Dsonar.projectKey=frontend \
                                              -Dsonar.sources=.
                                        '''
                                    }
                                    timeout(time: 15, unit: 'MINUTES') {
                                        waitForQualityGate abortPipeline: true
                                    }
                                }
                            }
                            if (!stageResults.containsKey('SonarQube Frontend')) {
                                stageResults['SonarQube Frontend'] = 'FAILURE'
                            }
                        }
                    }
                }
            }
        }

        stage('Upload to Nexus') {
            parallel {
                stage('Upload backend to Nexus') {
                    steps {
                        script {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                stageResults['Upload Backend to Nexus'] = 'SUCCESS'
                                dir('backend_app') {
                                    nexusArtifactUploader artifacts: [[
                                        artifactId: 'demo',
                                        file: "target/demo-${NEXT_VERSION}.jar",
                                        type: 'jar'
                                    ]],
                                    credentialsId: 'nexus',
                                    groupId: 'com.example',
                                    nexusUrl: '51.44.223.62:8081',
                                    nexusVersion: 'nexus3',
                                    protocol: 'http',
                                    repository: 'backend',
                                    version: "${NEXT_VERSION}"
                                }
                            }
                            if (!stageResults.containsKey('Upload Backend to Nexus')) {
                                stageResults['Upload Backend to Nexus'] = 'FAILURE'
                            }
                        }
                    }
                }

                stage('Upload Frontend to Nexus') {
                    steps {
                        script {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                stageResults['Upload Frontend to Nexus'] = 'SUCCESS'
                                dir('frontend/dist') {
                                    sh "tar -czf frontend-${NEXT_VERSION}.tar.gz *"
                                }
                                nexusArtifactUploader artifacts: [[
                                    artifactId: 'frontend',
                                    file: "frontend/dist/frontend-${NEXT_VERSION}.tar.gz",
                                    type: 'tar.gz'
                                ]],
                                credentialsId: 'nexus',
                                groupId: 'com.example.frontend',
                                nexusUrl: '51.44.223.62:8081',
                                nexusVersion: 'nexus3',
                                protocol: 'http',
                                repository: 'frontend',
                                version: "${NEXT_VERSION}"
                            }
                            if (!stageResults.containsKey('Upload Frontend to Nexus')) {
                                stageResults['Upload Frontend to Nexus'] = 'FAILURE'
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push via Ansible') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        stageResults['Docker Build & Push via Ansible'] = 'SUCCESS'
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'docker',
                                usernameVariable: 'DOCKER_USERNAME',
                                passwordVariable: 'DOCKER_PASSWORD'
                            )
                        ]) {
                            sh """
                                ansible-playbook -vvv ansible/playbook-delivery.yml \
                                  -e build_context=${WORKSPACE} \
                                  -e NEXT_VERSION=${NEXT_VERSION}
                            """
                        }
                    }
                    if (!stageResults.containsKey('Docker Build & Push via Ansible')) {
                        stageResults['Docker Build & Push via Ansible'] = 'FAILURE'
                    }
                }
            }
        }

        stage('Clean Old Docker Images & volumes') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        stageResults['Clean Old Docker Images & Volumes'] = 'SUCCESS'
                        sh 'docker system prune -a -f --volumes'
                        sh 'docker image prune -f'
                        sh '''
                            docker images --filter=reference='basmaoueslati/*' --format '{{.ID}}' \
                            | xargs -r docker rmi -f
                        '''
                    }
                    if (!stageResults.containsKey('Clean Old Docker Images & Volumes')) {
                        stageResults['Clean Old Docker Images & Volumes'] = 'FAILURE'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        stageResults['Deploy to Kubernetes'] = 'SUCCESS'
                        sh 'kubectl delete rs -n fullstackapp --all || true'
                        sh 'kubectl apply -f kubernetes/backend/backend-config.yaml -n fullstackapp'
                        sh 'kubectl apply -f kubernetes/frontend/frontend-config.yaml -n fullstackapp'
                        ansiblePlaybook(
                            playbook: 'ansible/deploy-k8s.yaml',
                            inventory: 'ansible/dev.ini',
                            credentialsId: 'ssh-jenkins-Masterk8s',
                            extras: """
                                -e version=${NEXT_VERSION} \
                                -e docker_registry=basmaoueslati
                            """
                        )
                        sh '''
                            kubectl rollout -n fullstackapp status deployment/frontend --timeout=300s
                            kubectl rollout -n fullstackapp status deployment/backend --timeout=300s
                        '''
                    }
                    if (!stageResults.containsKey('Deploy to Kubernetes')) {
                        stageResults['Deploy to Kubernetes'] = 'FAILURE'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def report = "Job '${env.JOB_NAME} [#${env.BUILD_NUMBER}]' finished with status: ${currentBuild.currentResult}\n\n"
                report += "Stage Report:\n"
                stageResults.each { stage, result ->
                    report += "- ${stage}: ${result}\n"
                }

                emailext(
                    subject: "Jenkins Job Report - ${currentBuild.currentResult}",
                    body: report,
                    to: 'oueslatibasma2020@gmail.com'
                )
            }
        }
    }

    // Declare this outside any stage
    environment {
        stageResults = [:]
    }
}
